package net.ruixin.service.config;

import net.ruixin.dao.config.IConfigDao;
import net.ruixin.domain.plat.config.SysConfig;
import net.ruixin.util.cache.Cache;
import net.ruixin.util.cache.CacheKit;
import net.ruixin.util.paginate.FastPagination;
import net.ruixin.util.tools.RxFileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.util.Map;

@Service
public class ConfigService implements IConfigService {

    @Autowired
    private IConfigDao configDao;

    @Transactional
    @Override
    public void saveConfig(SysConfig config) {
        //新增、修改配置到数据库
        configDao.saveConfig(config);
        //同步更新后端缓存配置
        CacheKit.put(Cache.CONFIG, config.getCode(), config.getValue());
        //重新生成前端缓存文件
        cacheConfig();
    }

    @Override
    public SysConfig getConfigById(Long id) {
        return configDao.getConfigById(id);
    }

    @Transactional
    @Override
    public void delConfig(Long id) {
        //删除数据库中配置
        configDao.delConfig(id);
        //同步更新后端缓存配置
        SysConfig config = getConfigById(id);
        CacheKit.remove(Cache.CONFIG, config.getCode());
        //重新生成前端缓存文件
        cacheConfig();
    }

    @Override
    public FastPagination getConfigList(Map map) {
        return configDao.getConfigList(map);
    }

    private void cacheConfig() {
        File f = new File(CacheKit.get(Cache.CONFIG, "contextPath") + "medias/cache/platConfig.js");
        RxFileUtils.createFile(f, CacheKit.getAll(Cache.CONFIG));
    }
}
